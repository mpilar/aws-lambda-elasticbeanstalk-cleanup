
{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Cleans up old EB versions",
    "Parameters": {
        "VersionLimit": {
            "Type": "String",
            "Default": "10"
        },
        "MemorySize": {
            "Type": "String",
            "Default": "128"
        },
        "Timeout": {
            "Type": "String",
            "Default": "60"
        },
        "Schedule": {
            "Type": "String",
            "Default": "rate(1 day)"
        }
    },
    "Resources": {
        "CleanupScheduleRule": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "ScheduleExpression": {"Ref": "Schedule"},
                "Targets": [
                    {
                        "Id": "CleanupVersions",
                        "Arn": {"Fn::GetAtt": ["CleanupVersions", "Arn"]}
                    }
                ]
            }
        },
        "InvokeLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {"Fn::GetAtt": ["CleanupVersions", "Arn"]},
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": { "Fn::GetAtt": ["CleanupScheduleRule", "Arn"]}
            }
        },
        "CleanupVersions": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": ["", [
                            "import boto3\n",
                            "versionLimit = os.environ.get('VERSION_LIMIT', 25)\n",
                            "region = os.environ.get('REGION', 'us-east-1')\n",
                            "def lambda_handler(event, context):\n",
                            "   print '--- Cleaning up Beanstalk App Versions in region: %s - limit: %s' % (region, versionLimit)\n",
                            "   ebClient = boto3.client('elasticbeanstalk', region_name=region)\n",
                            "   for app in ebClient.describe_applications()['Applications']:\n",
                            "       applicationName = app['ApplicationName']\n",
                            "       print 'Cleaning application: %s' % applicationName\n",
                            "       appVersions = ebClient.describe_application_versions(ApplicationName=applicationName)['ApplicationVersions']\n",
                            "       print ' * Application Versions: %s' % len(appVersions)\n",
                            "       sortedVersions = sorted(appVersions, key=lambda v: v['DateCreated'], reverse=True)\n",
                            "       sortedVersionsCount = len(sortedVersions)\n",
                            "       listDiff = sortedVersionsCount - versionLimit;\n",
                            "       if (listDiff > 0):\n",
                            "           versionsToDelete = [version['VersionLabel'] for version in sortedVersions[(sortedVersionsCount-listDiff):sortedVersionsCount]]\n",
                            "           print ' *** Suggested Versions to Delete (%s): %s ' % (len(versionsToDelete), versionsToDelete)\n",
                            "           environments = ebClient.describe_environments(ApplicationName=applicationName)['Environments']\n",
                            "           deployedVersions = [environment['VersionLabel'] for environment in environments]\n",
                            "           print ' *** Deployed Versions: %s' % deployedVersions\n",
                            "           finalVersionsToDelete = set(versionsToDelete).difference(set(deployedVersions))\n",
                            "           print ' *** Final Versions to delete (%s, excluding the ones that are deployed) : %s' % (len(finalVersionsToDelete), finalVersionsToDelete)\n",
                            "           for version in finalVersionsToDelete:\n",
                            "               print ' **** Deleting Version : %s ' % version\n",
                            "               ebClient.delete_application_version(ApplicationName=applicationName,VersionLabel=version,DeleteSourceBundle=True)\n",
                            "           print ' *** Application Versions deleted: %s, bye' % len(finalVersionsToDelete)\n",
                            "       else:\n",
                            "           print ' *** Application Versions number %s is lower than the limit %s, no need to clean up, bye.' % (sortedVersionsCount, versionLimit)\n",
                            "       print '------------------------------------------------------------------------------'\n"
                        ]]
                    }
                },
                "FunctionName": "CleanupBeanstalkAppVersions",
                "Handler": "index.lambda_handler",
                "MemorySize": {"Ref": "MemorySize"},
                "Role": { "Fn::GetAtt": ["IamRole", "Arn"]},
                "Runtime": "python2.7",
                "Timeout": {"Ref": "Timeout"},
                "Environment": {
                    "Variables": {
                        "VERSION_LIMIT": {"Ref": "VersionLimit"},
                        "REGION": {"Ref": "AWS::Region"}
                    }
                }
            }
        },
        "IamRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{ "Effect": "Allow", "Principal": {"Service": ["lambda.amazonaws.com"]}, "Action": ["sts:AssumeRole"] }]
                    },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "root",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": "arn:aws:logs:*:*:*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "elasticbeanstalk:DescribeApplications",
                                        "elasticbeanstalk:DescribeApplicationVersions",
                                        "elasticbeanstalk:DescribeEnvironments",
                                        "elasticbeanstalk:DeleteApplicationVersion",
                                        "s3:GetObject",
                                        "s3:ListBucket",
                                        "s3:DeleteObject"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        }
    }
}
